package de.umr.core.extensions

/**@return The intersection of multiple sets in a new [HashSet] object.*/
fun <T> Collection<Set<T>>.intersectAll() =
        if (size == 1) first()
        else HashSet(minBy { it.size } ?: emptySet()).apply { this@intersectAll.forEach { retainAll(it) } }


/**Returns a [Map] containing the elements from the given collection indexed by the key
 * returned from [keySelector] function applied to each element.
 * If multiple elements would have the same key returned by [keySelector], a set of all matching
 * values gets added to the map.
 *
 * Kotlin's [associateBy] is similar, but if multiple elements return the same key, only the last these
 * elements is retained.
 *
 * @param T The type of the elements in the collection
 * @param K The type the selector function returns
 *
 * @return A [MutableMap] which maps from the keys generated by [keySelector] to the set of all elements
 * which generated the respective key.
 */
fun <K, T> Collection<T>.multiAssociateBy(keySelector: (T) -> K) =
        HashMap<K, MutableSet<T>>().apply {
            for (elem in this@multiAssociateBy) {
                val key = keySelector(elem)
                get(key)?.add(elem) ?: put(key, mutableSetOf(elem))
            }
        }